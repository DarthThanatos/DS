# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.3
#
# <auto-generated>
#
# Generated from file `laboratory.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

if '_t_stringSeq' not in _M_Demo.__dict__:
    _M_Demo._t_stringSeq = IcePy.defineSequence('::Demo::stringSeq', (), IcePy._t_string)

if 'Device' not in _M_Demo.__dict__:
    _M_Demo.Device = Ice.createTempClass()
    class Device(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Demo.Device:
                raise RuntimeError('Demo.Device is an abstract class')

        def ice_ids(self, current=None):
            return ('::Demo::Device', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Device'

        def ice_staticId():
            return '::Demo::Device'
        ice_staticId = staticmethod(ice_staticId)

        def getName(self, current=None):
            pass

        def getState(self, current=None):
            pass

        def feedBattery(self, current=None):
            pass

        def listActions(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_Device)

        __repr__ = __str__

    _M_Demo.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def getName(self, _ctx=None):
            return _M_Demo.Device._op_getName.invoke(self, ((), _ctx))

        def begin_getName(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.Device._op_getName.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getName(self, _r):
            return _M_Demo.Device._op_getName.end(self, _r)

        def getState(self, _ctx=None):
            return _M_Demo.Device._op_getState.invoke(self, ((), _ctx))

        def begin_getState(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.Device._op_getState.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getState(self, _r):
            return _M_Demo.Device._op_getState.end(self, _r)

        def feedBattery(self, _ctx=None):
            return _M_Demo.Device._op_feedBattery.invoke(self, ((), _ctx))

        def begin_feedBattery(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.Device._op_feedBattery.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_feedBattery(self, _r):
            return _M_Demo.Device._op_feedBattery.end(self, _r)

        def listActions(self, _ctx=None):
            return _M_Demo.Device._op_listActions.invoke(self, ((), _ctx))

        def begin_listActions(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.Device._op_listActions.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_listActions(self, _r):
            return _M_Demo.Device._op_listActions.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Demo.DevicePrx.ice_checkedCast(proxy, '::Demo::Device', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Demo.DevicePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Demo::Device'
        ice_staticId = staticmethod(ice_staticId)

    _M_Demo._t_DevicePrx = IcePy.defineProxy('::Demo::Device', DevicePrx)

    _M_Demo._t_Device = IcePy.defineClass('::Demo::Device', Device, -1, (), True, False, None, (), ())
    Device._ice_type = _M_Demo._t_Device

    Device._op_getName = IcePy.Operation('getName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Device._op_getState = IcePy.Operation('getState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Device._op_feedBattery = IcePy.Operation('feedBattery', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Device._op_listActions = IcePy.Operation('listActions', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Demo._t_stringSeq, False, 0), ())

    _M_Demo.Device = Device
    del Device

    _M_Demo.DevicePrx = DevicePrx
    del DevicePrx

if 'AlreadyControlledException' not in _M_Demo.__dict__:
    _M_Demo.AlreadyControlledException = Ice.createTempClass()
    class AlreadyControlledException(Ice.UserException):
        def __init__(self, byWho=''):
            self.byWho = byWho

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Demo::AlreadyControlledException'

    _M_Demo._t_AlreadyControlledException = IcePy.defineException('::Demo::AlreadyControlledException', AlreadyControlledException, (), False, None, (('byWho', (), IcePy._t_string, False, 0),))
    AlreadyControlledException._ice_type = _M_Demo._t_AlreadyControlledException

    _M_Demo.AlreadyControlledException = AlreadyControlledException
    del AlreadyControlledException

if 'NotKnownDeviceException' not in _M_Demo.__dict__:
    _M_Demo.NotKnownDeviceException = Ice.createTempClass()
    class NotKnownDeviceException(Ice.UserException):
        def __init__(self, explanation=''):
            self.explanation = explanation

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Demo::NotKnownDeviceException'

    _M_Demo._t_NotKnownDeviceException = IcePy.defineException('::Demo::NotKnownDeviceException', NotKnownDeviceException, (), False, None, (('explanation', (), IcePy._t_string, False, 0),))
    NotKnownDeviceException._ice_type = _M_Demo._t_NotKnownDeviceException

    _M_Demo.NotKnownDeviceException = NotKnownDeviceException
    del NotKnownDeviceException

if 'DeviceNotControlledException' not in _M_Demo.__dict__:
    _M_Demo.DeviceNotControlledException = Ice.createTempClass()
    class DeviceNotControlledException(Ice.UserException):
        def __init__(self, explanation=''):
            self.explanation = explanation

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Demo::DeviceNotControlledException'

    _M_Demo._t_DeviceNotControlledException = IcePy.defineException('::Demo::DeviceNotControlledException', DeviceNotControlledException, (), False, None, (('explanation', (), IcePy._t_string, False, 0),))
    DeviceNotControlledException._ice_type = _M_Demo._t_DeviceNotControlledException

    _M_Demo.DeviceNotControlledException = DeviceNotControlledException
    del DeviceNotControlledException

if 'LaboratoryRoom' not in _M_Demo.__dict__:
    _M_Demo.LaboratoryRoom = Ice.createTempClass()
    class LaboratoryRoom(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Demo.LaboratoryRoom:
                raise RuntimeError('Demo.LaboratoryRoom is an abstract class')

        def ice_ids(self, current=None):
            return ('::Demo::LaboratoryRoom', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::LaboratoryRoom'

        def ice_staticId():
            return '::Demo::LaboratoryRoom'
        ice_staticId = staticmethod(ice_staticId)

        def getDevicesNamesList(self, current=None):
            pass

        def getDeviceOperationsList(self, deviceId, current=None):
            pass

        def takeControlOverDevice(self, deviceId, userId, current=None):
            pass

        def releaseDevice(self, deviceId, userId, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_LaboratoryRoom)

        __repr__ = __str__

    _M_Demo.LaboratoryRoomPrx = Ice.createTempClass()
    class LaboratoryRoomPrx(Ice.ObjectPrx):

        def getDevicesNamesList(self, _ctx=None):
            return _M_Demo.LaboratoryRoom._op_getDevicesNamesList.invoke(self, ((), _ctx))

        def begin_getDevicesNamesList(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.LaboratoryRoom._op_getDevicesNamesList.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getDevicesNamesList(self, _r):
            return _M_Demo.LaboratoryRoom._op_getDevicesNamesList.end(self, _r)

        def getDeviceOperationsList(self, deviceId, _ctx=None):
            return _M_Demo.LaboratoryRoom._op_getDeviceOperationsList.invoke(self, ((deviceId, ), _ctx))

        def begin_getDeviceOperationsList(self, deviceId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.LaboratoryRoom._op_getDeviceOperationsList.begin(self, ((deviceId, ), _response, _ex, _sent, _ctx))

        def end_getDeviceOperationsList(self, _r):
            return _M_Demo.LaboratoryRoom._op_getDeviceOperationsList.end(self, _r)

        def takeControlOverDevice(self, deviceId, userId, _ctx=None):
            return _M_Demo.LaboratoryRoom._op_takeControlOverDevice.invoke(self, ((deviceId, userId), _ctx))

        def begin_takeControlOverDevice(self, deviceId, userId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.LaboratoryRoom._op_takeControlOverDevice.begin(self, ((deviceId, userId), _response, _ex, _sent, _ctx))

        def end_takeControlOverDevice(self, _r):
            return _M_Demo.LaboratoryRoom._op_takeControlOverDevice.end(self, _r)

        def releaseDevice(self, deviceId, userId, _ctx=None):
            return _M_Demo.LaboratoryRoom._op_releaseDevice.invoke(self, ((deviceId, userId), _ctx))

        def begin_releaseDevice(self, deviceId, userId, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.LaboratoryRoom._op_releaseDevice.begin(self, ((deviceId, userId), _response, _ex, _sent, _ctx))

        def end_releaseDevice(self, _r):
            return _M_Demo.LaboratoryRoom._op_releaseDevice.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Demo.LaboratoryRoomPrx.ice_checkedCast(proxy, '::Demo::LaboratoryRoom', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Demo.LaboratoryRoomPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Demo::LaboratoryRoom'
        ice_staticId = staticmethod(ice_staticId)

    _M_Demo._t_LaboratoryRoomPrx = IcePy.defineProxy('::Demo::LaboratoryRoom', LaboratoryRoomPrx)

    _M_Demo._t_LaboratoryRoom = IcePy.defineClass('::Demo::LaboratoryRoom', LaboratoryRoom, -1, (), True, False, None, (), ())
    LaboratoryRoom._ice_type = _M_Demo._t_LaboratoryRoom

    LaboratoryRoom._op_getDevicesNamesList = IcePy.Operation('getDevicesNamesList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Demo._t_stringSeq, False, 0), ())
    LaboratoryRoom._op_getDeviceOperationsList = IcePy.Operation('getDeviceOperationsList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Demo._t_stringSeq, False, 0), (_M_Demo._t_NotKnownDeviceException,))
    LaboratoryRoom._op_takeControlOverDevice = IcePy.Operation('takeControlOverDevice', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_Demo._t_DevicePrx, False, 0), (_M_Demo._t_AlreadyControlledException, _M_Demo._t_NotKnownDeviceException))
    LaboratoryRoom._op_releaseDevice = IcePy.Operation('releaseDevice', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_Demo._t_NotKnownDeviceException, _M_Demo._t_DeviceNotControlledException))

    _M_Demo.LaboratoryRoom = LaboratoryRoom
    del LaboratoryRoom

    _M_Demo.LaboratoryRoomPrx = LaboratoryRoomPrx
    del LaboratoryRoomPrx

if 'RotationOutOfRangeException' not in _M_Demo.__dict__:
    _M_Demo.RotationOutOfRangeException = Ice.createTempClass()
    class RotationOutOfRangeException(Ice.UserException):
        def __init__(self, minVertical=0.0, maxVertival=0.0, actual=0.0, reason=''):
            self.minVertical = minVertical
            self.maxVertival = maxVertival
            self.actual = actual
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Demo::RotationOutOfRangeException'

    _M_Demo._t_RotationOutOfRangeException = IcePy.defineException('::Demo::RotationOutOfRangeException', RotationOutOfRangeException, (), False, None, (
        ('minVertical', (), IcePy._t_float, False, 0),
        ('maxVertival', (), IcePy._t_float, False, 0),
        ('actual', (), IcePy._t_float, False, 0),
        ('reason', (), IcePy._t_string, False, 0)
    ))
    RotationOutOfRangeException._ice_type = _M_Demo._t_RotationOutOfRangeException

    _M_Demo.RotationOutOfRangeException = RotationOutOfRangeException
    del RotationOutOfRangeException

if 'Camera' not in _M_Demo.__dict__:
    _M_Demo.Camera = Ice.createTempClass()
    class Camera(_M_Demo.Device):
        def __init__(self):
            if Ice.getType(self) == _M_Demo.Camera:
                raise RuntimeError('Demo.Camera is an abstract class')

        def ice_ids(self, current=None):
            return ('::Demo::Camera', '::Demo::Device', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Camera'

        def ice_staticId():
            return '::Demo::Camera'
        ice_staticId = staticmethod(ice_staticId)

        def turnLeft(self, angle, current=None):
            pass

        def turnRight(self, angle, current=None):
            pass

        def turnUp(self, angle, current=None):
            pass

        def turnDown(self, angle, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_Camera)

        __repr__ = __str__

    _M_Demo.CameraPrx = Ice.createTempClass()
    class CameraPrx(_M_Demo.DevicePrx):

        def turnLeft(self, angle, _ctx=None):
            return _M_Demo.Camera._op_turnLeft.invoke(self, ((angle, ), _ctx))

        def begin_turnLeft(self, angle, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.Camera._op_turnLeft.begin(self, ((angle, ), _response, _ex, _sent, _ctx))

        def end_turnLeft(self, _r):
            return _M_Demo.Camera._op_turnLeft.end(self, _r)

        def turnRight(self, angle, _ctx=None):
            return _M_Demo.Camera._op_turnRight.invoke(self, ((angle, ), _ctx))

        def begin_turnRight(self, angle, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.Camera._op_turnRight.begin(self, ((angle, ), _response, _ex, _sent, _ctx))

        def end_turnRight(self, _r):
            return _M_Demo.Camera._op_turnRight.end(self, _r)

        def turnUp(self, angle, _ctx=None):
            return _M_Demo.Camera._op_turnUp.invoke(self, ((angle, ), _ctx))

        def begin_turnUp(self, angle, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.Camera._op_turnUp.begin(self, ((angle, ), _response, _ex, _sent, _ctx))

        def end_turnUp(self, _r):
            return _M_Demo.Camera._op_turnUp.end(self, _r)

        def turnDown(self, angle, _ctx=None):
            return _M_Demo.Camera._op_turnDown.invoke(self, ((angle, ), _ctx))

        def begin_turnDown(self, angle, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.Camera._op_turnDown.begin(self, ((angle, ), _response, _ex, _sent, _ctx))

        def end_turnDown(self, _r):
            return _M_Demo.Camera._op_turnDown.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Demo.CameraPrx.ice_checkedCast(proxy, '::Demo::Camera', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Demo.CameraPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Demo::Camera'
        ice_staticId = staticmethod(ice_staticId)

    _M_Demo._t_CameraPrx = IcePy.defineProxy('::Demo::Camera', CameraPrx)

    _M_Demo._t_Camera = IcePy.defineClass('::Demo::Camera', Camera, -1, (), True, False, None, (_M_Demo._t_Device,), ())
    Camera._ice_type = _M_Demo._t_Camera

    Camera._op_turnLeft = IcePy.Operation('turnLeft', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Demo._t_RotationOutOfRangeException,))
    Camera._op_turnRight = IcePy.Operation('turnRight', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Demo._t_RotationOutOfRangeException,))
    Camera._op_turnUp = IcePy.Operation('turnUp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Demo._t_RotationOutOfRangeException,))
    Camera._op_turnDown = IcePy.Operation('turnDown', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Demo._t_RotationOutOfRangeException,))

    _M_Demo.Camera = Camera
    del Camera

    _M_Demo.CameraPrx = CameraPrx
    del CameraPrx

if 'ZoomOutOfRangeException' not in _M_Demo.__dict__:
    _M_Demo.ZoomOutOfRangeException = Ice.createTempClass()
    class ZoomOutOfRangeException(Ice.UserException):
        def __init__(self, maxLvl=0, actualLvl=0, reason=''):
            self.maxLvl = maxLvl
            self.actualLvl = actualLvl
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Demo::ZoomOutOfRangeException'

    _M_Demo._t_ZoomOutOfRangeException = IcePy.defineException('::Demo::ZoomOutOfRangeException', ZoomOutOfRangeException, (), False, None, (
        ('maxLvl', (), IcePy._t_int, False, 0),
        ('actualLvl', (), IcePy._t_int, False, 0),
        ('reason', (), IcePy._t_string, False, 0)
    ))
    ZoomOutOfRangeException._ice_type = _M_Demo._t_ZoomOutOfRangeException

    _M_Demo.ZoomOutOfRangeException = ZoomOutOfRangeException
    del ZoomOutOfRangeException

if 'ZoomingCamera' not in _M_Demo.__dict__:
    _M_Demo.ZoomingCamera = Ice.createTempClass()
    class ZoomingCamera(_M_Demo.Camera):
        def __init__(self):
            if Ice.getType(self) == _M_Demo.ZoomingCamera:
                raise RuntimeError('Demo.ZoomingCamera is an abstract class')

        def ice_ids(self, current=None):
            return ('::Demo::Camera', '::Demo::Device', '::Demo::ZoomingCamera', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::ZoomingCamera'

        def ice_staticId():
            return '::Demo::ZoomingCamera'
        ice_staticId = staticmethod(ice_staticId)

        def zoom(self, lvl, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_ZoomingCamera)

        __repr__ = __str__

    _M_Demo.ZoomingCameraPrx = Ice.createTempClass()
    class ZoomingCameraPrx(_M_Demo.CameraPrx):

        def zoom(self, lvl, _ctx=None):
            return _M_Demo.ZoomingCamera._op_zoom.invoke(self, ((lvl, ), _ctx))

        def begin_zoom(self, lvl, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.ZoomingCamera._op_zoom.begin(self, ((lvl, ), _response, _ex, _sent, _ctx))

        def end_zoom(self, _r):
            return _M_Demo.ZoomingCamera._op_zoom.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Demo.ZoomingCameraPrx.ice_checkedCast(proxy, '::Demo::ZoomingCamera', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Demo.ZoomingCameraPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Demo::ZoomingCamera'
        ice_staticId = staticmethod(ice_staticId)

    _M_Demo._t_ZoomingCameraPrx = IcePy.defineProxy('::Demo::ZoomingCamera', ZoomingCameraPrx)

    _M_Demo._t_ZoomingCamera = IcePy.defineClass('::Demo::ZoomingCamera', ZoomingCamera, -1, (), True, False, None, (_M_Demo._t_Camera,), ())
    ZoomingCamera._ice_type = _M_Demo._t_ZoomingCamera

    ZoomingCamera._op_zoom = IcePy.Operation('zoom', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_Demo._t_ZoomOutOfRangeException,))

    _M_Demo.ZoomingCamera = ZoomingCamera
    del ZoomingCamera

    _M_Demo.ZoomingCameraPrx = ZoomingCameraPrx
    del ZoomingCameraPrx

if 'OutOfInkException' not in _M_Demo.__dict__:
    _M_Demo.OutOfInkException = Ice.createTempClass()
    class OutOfInkException(Ice.UserException):
        def __init__(self, actualInkLvl=0, requiredInkLvl=0, reason=''):
            self.actualInkLvl = actualInkLvl
            self.requiredInkLvl = requiredInkLvl
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Demo::OutOfInkException'

    _M_Demo._t_OutOfInkException = IcePy.defineException('::Demo::OutOfInkException', OutOfInkException, (), False, None, (
        ('actualInkLvl', (), IcePy._t_int, False, 0),
        ('requiredInkLvl', (), IcePy._t_int, False, 0),
        ('reason', (), IcePy._t_string, False, 0)
    ))
    OutOfInkException._ice_type = _M_Demo._t_OutOfInkException

    _M_Demo.OutOfInkException = OutOfInkException
    del OutOfInkException

if 'Printer' not in _M_Demo.__dict__:
    _M_Demo.Printer = Ice.createTempClass()
    class Printer(_M_Demo.Device):
        def __init__(self):
            if Ice.getType(self) == _M_Demo.Printer:
                raise RuntimeError('Demo.Printer is an abstract class')

        def ice_ids(self, current=None):
            return ('::Demo::Device', '::Demo::Printer', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Printer'

        def ice_staticId():
            return '::Demo::Printer'
        ice_staticId = staticmethod(ice_staticId)

        def printString(self, s, current=None):
            pass

        def fillInk(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_Printer)

        __repr__ = __str__

    _M_Demo.PrinterPrx = Ice.createTempClass()
    class PrinterPrx(_M_Demo.DevicePrx):

        def printString(self, s, _ctx=None):
            return _M_Demo.Printer._op_printString.invoke(self, ((s, ), _ctx))

        def begin_printString(self, s, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.Printer._op_printString.begin(self, ((s, ), _response, _ex, _sent, _ctx))

        def end_printString(self, _r):
            return _M_Demo.Printer._op_printString.end(self, _r)

        def fillInk(self, _ctx=None):
            return _M_Demo.Printer._op_fillInk.invoke(self, ((), _ctx))

        def begin_fillInk(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.Printer._op_fillInk.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_fillInk(self, _r):
            return _M_Demo.Printer._op_fillInk.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Demo.PrinterPrx.ice_checkedCast(proxy, '::Demo::Printer', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Demo.PrinterPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Demo::Printer'
        ice_staticId = staticmethod(ice_staticId)

    _M_Demo._t_PrinterPrx = IcePy.defineProxy('::Demo::Printer', PrinterPrx)

    _M_Demo._t_Printer = IcePy.defineClass('::Demo::Printer', Printer, -1, (), True, False, None, (_M_Demo._t_Device,), ())
    Printer._ice_type = _M_Demo._t_Printer

    Printer._op_printString = IcePy.Operation('printString', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Demo._t_OutOfInkException,))
    Printer._op_fillInk = IcePy.Operation('fillInk', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_Demo.Printer = Printer
    del Printer

    _M_Demo.PrinterPrx = PrinterPrx
    del PrinterPrx

if 'AsciiPrinter' not in _M_Demo.__dict__:
    _M_Demo.AsciiPrinter = Ice.createTempClass()
    class AsciiPrinter(_M_Demo.Printer):
        def __init__(self):
            if Ice.getType(self) == _M_Demo.AsciiPrinter:
                raise RuntimeError('Demo.AsciiPrinter is an abstract class')

        def ice_ids(self, current=None):
            return ('::Demo::AsciiPrinter', '::Demo::Device', '::Demo::Printer', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::AsciiPrinter'

        def ice_staticId():
            return '::Demo::AsciiPrinter'
        ice_staticId = staticmethod(ice_staticId)

        def prettyPrint(self, s, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_AsciiPrinter)

        __repr__ = __str__

    _M_Demo.AsciiPrinterPrx = Ice.createTempClass()
    class AsciiPrinterPrx(_M_Demo.PrinterPrx):

        def prettyPrint(self, s, _ctx=None):
            return _M_Demo.AsciiPrinter._op_prettyPrint.invoke(self, ((s, ), _ctx))

        def begin_prettyPrint(self, s, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.AsciiPrinter._op_prettyPrint.begin(self, ((s, ), _response, _ex, _sent, _ctx))

        def end_prettyPrint(self, _r):
            return _M_Demo.AsciiPrinter._op_prettyPrint.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Demo.AsciiPrinterPrx.ice_checkedCast(proxy, '::Demo::AsciiPrinter', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Demo.AsciiPrinterPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Demo::AsciiPrinter'
        ice_staticId = staticmethod(ice_staticId)

    _M_Demo._t_AsciiPrinterPrx = IcePy.defineProxy('::Demo::AsciiPrinter', AsciiPrinterPrx)

    _M_Demo._t_AsciiPrinter = IcePy.defineClass('::Demo::AsciiPrinter', AsciiPrinter, -1, (), True, False, None, (_M_Demo._t_Printer,), ())
    AsciiPrinter._ice_type = _M_Demo._t_AsciiPrinter

    AsciiPrinter._op_prettyPrint = IcePy.Operation('prettyPrint', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Demo._t_OutOfInkException,))

    _M_Demo.AsciiPrinter = AsciiPrinter
    del AsciiPrinter

    _M_Demo.AsciiPrinterPrx = AsciiPrinterPrx
    del AsciiPrinterPrx

if 'InterpretingPrinter' not in _M_Demo.__dict__:
    _M_Demo.InterpretingPrinter = Ice.createTempClass()
    class InterpretingPrinter(_M_Demo.Printer):
        def __init__(self):
            if Ice.getType(self) == _M_Demo.InterpretingPrinter:
                raise RuntimeError('Demo.InterpretingPrinter is an abstract class')

        def ice_ids(self, current=None):
            return ('::Demo::Device', '::Demo::InterpretingPrinter', '::Demo::Printer', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::InterpretingPrinter'

        def ice_staticId():
            return '::Demo::InterpretingPrinter'
        ice_staticId = staticmethod(ice_staticId)

        def interpretAndPrint(self, s, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_InterpretingPrinter)

        __repr__ = __str__

    _M_Demo.InterpretingPrinterPrx = Ice.createTempClass()
    class InterpretingPrinterPrx(_M_Demo.PrinterPrx):

        def interpretAndPrint(self, s, _ctx=None):
            return _M_Demo.InterpretingPrinter._op_interpretAndPrint.invoke(self, ((s, ), _ctx))

        def begin_interpretAndPrint(self, s, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.InterpretingPrinter._op_interpretAndPrint.begin(self, ((s, ), _response, _ex, _sent, _ctx))

        def end_interpretAndPrint(self, _r):
            return _M_Demo.InterpretingPrinter._op_interpretAndPrint.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Demo.InterpretingPrinterPrx.ice_checkedCast(proxy, '::Demo::InterpretingPrinter', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Demo.InterpretingPrinterPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Demo::InterpretingPrinter'
        ice_staticId = staticmethod(ice_staticId)

    _M_Demo._t_InterpretingPrinterPrx = IcePy.defineProxy('::Demo::InterpretingPrinter', InterpretingPrinterPrx)

    _M_Demo._t_InterpretingPrinter = IcePy.defineClass('::Demo::InterpretingPrinter', InterpretingPrinter, -1, (), True, False, None, (_M_Demo._t_Printer,), ())
    InterpretingPrinter._ice_type = _M_Demo._t_InterpretingPrinter

    InterpretingPrinter._op_interpretAndPrint = IcePy.Operation('interpretAndPrint', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Demo._t_OutOfInkException,))

    _M_Demo.InterpretingPrinter = InterpretingPrinter
    del InterpretingPrinter

    _M_Demo.InterpretingPrinterPrx = InterpretingPrinterPrx
    del InterpretingPrinterPrx

if 'BrokenDiodeException' not in _M_Demo.__dict__:
    _M_Demo.BrokenDiodeException = Ice.createTempClass()
    class BrokenDiodeException(Ice.UserException):
        def __init__(self, maxMeasuredValue=0.0, actualMeasuredValue=0.0, reason=''):
            self.maxMeasuredValue = maxMeasuredValue
            self.actualMeasuredValue = actualMeasuredValue
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Demo::BrokenDiodeException'

    _M_Demo._t_BrokenDiodeException = IcePy.defineException('::Demo::BrokenDiodeException', BrokenDiodeException, (), False, None, (
        ('maxMeasuredValue', (), IcePy._t_float, False, 0),
        ('actualMeasuredValue', (), IcePy._t_float, False, 0),
        ('reason', (), IcePy._t_string, False, 0)
    ))
    BrokenDiodeException._ice_type = _M_Demo._t_BrokenDiodeException

    _M_Demo.BrokenDiodeException = BrokenDiodeException
    del BrokenDiodeException

if 'Sensor' not in _M_Demo.__dict__:
    _M_Demo.Sensor = Ice.createTempClass()
    class Sensor(_M_Demo.Device):
        def __init__(self):
            if Ice.getType(self) == _M_Demo.Sensor:
                raise RuntimeError('Demo.Sensor is an abstract class')

        def ice_ids(self, current=None):
            return ('::Demo::Device', '::Demo::Sensor', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Sensor'

        def ice_staticId():
            return '::Demo::Sensor'
        ice_staticId = staticmethod(ice_staticId)

        def measureMotion(self, speed, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_Sensor)

        __repr__ = __str__

    _M_Demo.SensorPrx = Ice.createTempClass()
    class SensorPrx(_M_Demo.DevicePrx):

        def measureMotion(self, speed, _ctx=None):
            return _M_Demo.Sensor._op_measureMotion.invoke(self, ((speed, ), _ctx))

        def begin_measureMotion(self, speed, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.Sensor._op_measureMotion.begin(self, ((speed, ), _response, _ex, _sent, _ctx))

        def end_measureMotion(self, _r):
            return _M_Demo.Sensor._op_measureMotion.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Demo.SensorPrx.ice_checkedCast(proxy, '::Demo::Sensor', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Demo.SensorPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Demo::Sensor'
        ice_staticId = staticmethod(ice_staticId)

    _M_Demo._t_SensorPrx = IcePy.defineProxy('::Demo::Sensor', SensorPrx)

    _M_Demo._t_Sensor = IcePy.defineClass('::Demo::Sensor', Sensor, -1, (), True, False, None, (_M_Demo._t_Device,), ())
    Sensor._ice_type = _M_Demo._t_Sensor

    Sensor._op_measureMotion = IcePy.Operation('measureMotion', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Demo._t_BrokenDiodeException,))

    _M_Demo.Sensor = Sensor
    del Sensor

    _M_Demo.SensorPrx = SensorPrx
    del SensorPrx

if 'MoistureSensor' not in _M_Demo.__dict__:
    _M_Demo.MoistureSensor = Ice.createTempClass()
    class MoistureSensor(_M_Demo.Sensor):
        def __init__(self):
            if Ice.getType(self) == _M_Demo.MoistureSensor:
                raise RuntimeError('Demo.MoistureSensor is an abstract class')

        def ice_ids(self, current=None):
            return ('::Demo::Device', '::Demo::MoistureSensor', '::Demo::Sensor', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::MoistureSensor'

        def ice_staticId():
            return '::Demo::MoistureSensor'
        ice_staticId = staticmethod(ice_staticId)

        def measureMoisture(self, moisture, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_MoistureSensor)

        __repr__ = __str__

    _M_Demo.MoistureSensorPrx = Ice.createTempClass()
    class MoistureSensorPrx(_M_Demo.SensorPrx):

        def measureMoisture(self, moisture, _ctx=None):
            return _M_Demo.MoistureSensor._op_measureMoisture.invoke(self, ((moisture, ), _ctx))

        def begin_measureMoisture(self, moisture, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.MoistureSensor._op_measureMoisture.begin(self, ((moisture, ), _response, _ex, _sent, _ctx))

        def end_measureMoisture(self, _r):
            return _M_Demo.MoistureSensor._op_measureMoisture.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Demo.MoistureSensorPrx.ice_checkedCast(proxy, '::Demo::MoistureSensor', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Demo.MoistureSensorPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Demo::MoistureSensor'
        ice_staticId = staticmethod(ice_staticId)

    _M_Demo._t_MoistureSensorPrx = IcePy.defineProxy('::Demo::MoistureSensor', MoistureSensorPrx)

    _M_Demo._t_MoistureSensor = IcePy.defineClass('::Demo::MoistureSensor', MoistureSensor, -1, (), True, False, None, (_M_Demo._t_Sensor,), ())
    MoistureSensor._ice_type = _M_Demo._t_MoistureSensor

    MoistureSensor._op_measureMoisture = IcePy.Operation('measureMoisture', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Demo._t_BrokenDiodeException,))

    _M_Demo.MoistureSensor = MoistureSensor
    del MoistureSensor

    _M_Demo.MoistureSensorPrx = MoistureSensorPrx
    del MoistureSensorPrx

if 'BodyTemperatureSensor' not in _M_Demo.__dict__:
    _M_Demo.BodyTemperatureSensor = Ice.createTempClass()
    class BodyTemperatureSensor(_M_Demo.Sensor):
        def __init__(self):
            if Ice.getType(self) == _M_Demo.BodyTemperatureSensor:
                raise RuntimeError('Demo.BodyTemperatureSensor is an abstract class')

        def ice_ids(self, current=None):
            return ('::Demo::BodyTemperatureSensor', '::Demo::Device', '::Demo::Sensor', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::BodyTemperatureSensor'

        def ice_staticId():
            return '::Demo::BodyTemperatureSensor'
        ice_staticId = staticmethod(ice_staticId)

        def measureBodyTemperature(self, temperature, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_BodyTemperatureSensor)

        __repr__ = __str__

    _M_Demo.BodyTemperatureSensorPrx = Ice.createTempClass()
    class BodyTemperatureSensorPrx(_M_Demo.SensorPrx):

        def measureBodyTemperature(self, temperature, _ctx=None):
            return _M_Demo.BodyTemperatureSensor._op_measureBodyTemperature.invoke(self, ((temperature, ), _ctx))

        def begin_measureBodyTemperature(self, temperature, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.BodyTemperatureSensor._op_measureBodyTemperature.begin(self, ((temperature, ), _response, _ex, _sent, _ctx))

        def end_measureBodyTemperature(self, _r):
            return _M_Demo.BodyTemperatureSensor._op_measureBodyTemperature.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Demo.BodyTemperatureSensorPrx.ice_checkedCast(proxy, '::Demo::BodyTemperatureSensor', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Demo.BodyTemperatureSensorPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Demo::BodyTemperatureSensor'
        ice_staticId = staticmethod(ice_staticId)

    _M_Demo._t_BodyTemperatureSensorPrx = IcePy.defineProxy('::Demo::BodyTemperatureSensor', BodyTemperatureSensorPrx)

    _M_Demo._t_BodyTemperatureSensor = IcePy.defineClass('::Demo::BodyTemperatureSensor', BodyTemperatureSensor, -1, (), True, False, None, (_M_Demo._t_Sensor,), ())
    BodyTemperatureSensor._ice_type = _M_Demo._t_BodyTemperatureSensor

    BodyTemperatureSensor._op_measureBodyTemperature = IcePy.Operation('measureBodyTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Demo._t_BrokenDiodeException,))

    _M_Demo.BodyTemperatureSensor = BodyTemperatureSensor
    del BodyTemperatureSensor

    _M_Demo.BodyTemperatureSensorPrx = BodyTemperatureSensorPrx
    del BodyTemperatureSensorPrx

if 'Reporter' not in _M_Demo.__dict__:
    _M_Demo.Reporter = Ice.createTempClass()
    class Reporter(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Demo.Reporter:
                raise RuntimeError('Demo.Reporter is an abstract class')

        def ice_ids(self, current=None):
            return ('::Demo::Reporter', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::Reporter'

        def ice_staticId():
            return '::Demo::Reporter'
        ice_staticId = staticmethod(ice_staticId)

        def report(self, msg, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_Reporter)

        __repr__ = __str__

    _M_Demo.ReporterPrx = Ice.createTempClass()
    class ReporterPrx(Ice.ObjectPrx):

        def report(self, msg, _ctx=None):
            return _M_Demo.Reporter._op_report.invoke(self, ((msg, ), _ctx))

        def begin_report(self, msg, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Demo.Reporter._op_report.begin(self, ((msg, ), _response, _ex, _sent, _ctx))

        def end_report(self, _r):
            return _M_Demo.Reporter._op_report.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Demo.ReporterPrx.ice_checkedCast(proxy, '::Demo::Reporter', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Demo.ReporterPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Demo::Reporter'
        ice_staticId = staticmethod(ice_staticId)

    _M_Demo._t_ReporterPrx = IcePy.defineProxy('::Demo::Reporter', ReporterPrx)

    _M_Demo._t_Reporter = IcePy.defineClass('::Demo::Reporter', Reporter, -1, (), True, False, None, (), ())
    Reporter._ice_type = _M_Demo._t_Reporter

    Reporter._op_report = IcePy.Operation('report', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_Demo.Reporter = Reporter
    del Reporter

    _M_Demo.ReporterPrx = ReporterPrx
    del ReporterPrx

# End of module Demo
