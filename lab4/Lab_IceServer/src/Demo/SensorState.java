// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `laboratory.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

public class SensorState extends DeviceState
{
    public SensorState()
    {
        super();
        speedColor = diodecolor.RED;
    }

    public SensorState(float batteryLevel, String lastUserName, long operationTime, float speedInMilesPerHour, float speedInMetresPerHour, diodecolor speedColor)
    {
        super(batteryLevel, lastUserName, operationTime);
        this.speedInMilesPerHour = speedInMilesPerHour;
        this.speedInMetresPerHour = speedInMetresPerHour;
        this.speedColor = speedColor;
    }

    private static class __F implements Ice.ObjectFactory
    {
        public Ice.Object create(String type)
        {
            assert(type.equals(ice_staticId()));
            return new SensorState();
        }

        public void destroy()
        {
        }
    }
    private static Ice.ObjectFactory _factory = new __F();

    public static Ice.ObjectFactory
    ice_factory()
    {
        return _factory;
    }

    public static final String[] __ids =
    {
        "::Demo::DeviceState",
        "::Demo::SensorState",
        "::Ice::Object"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, false);
        __os.writeFloat(speedInMilesPerHour);
        __os.writeFloat(speedInMetresPerHour);
        diodecolor.__write(__os, speedColor);
        __os.endWriteSlice();
        super.__writeImpl(__os);
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        speedInMilesPerHour = __is.readFloat();
        speedInMetresPerHour = __is.readFloat();
        speedColor = diodecolor.__read(__is);
        __is.endReadSlice();
        super.__readImpl(__is);
    }

    public float speedInMilesPerHour;

    public float speedInMetresPerHour;

    public diodecolor speedColor;

    public SensorState
    clone()
    {
        return (SensorState)super.clone();
    }

    public static final long serialVersionUID = 350204164L;
}
