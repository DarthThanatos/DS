// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `laboratory.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

/**
 * Provides type-specific helper functions.
 **/
public final class ZoomingCameraPrxHelper extends Ice.ObjectPrxHelperBase implements ZoomingCameraPrx
{
    private static final String __turnDown_name = "turnDown";

    public void turnDown(float angle)
        throws RotationOutOfRangeException
    {
        turnDown(angle, null, false);
    }

    public void turnDown(float angle, java.util.Map<String, String> __ctx)
        throws RotationOutOfRangeException
    {
        turnDown(angle, __ctx, true);
    }

    private void turnDown(float angle, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws RotationOutOfRangeException
    {
        __checkTwowayOnly(__turnDown_name);
        end_turnDown(begin_turnDown(angle, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_turnDown(float angle)
    {
        return begin_turnDown(angle, null, false, false, null);
    }

    public Ice.AsyncResult begin_turnDown(float angle, java.util.Map<String, String> __ctx)
    {
        return begin_turnDown(angle, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_turnDown(float angle, Ice.Callback __cb)
    {
        return begin_turnDown(angle, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_turnDown(float angle, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_turnDown(angle, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_turnDown(float angle, Callback_Camera_turnDown __cb)
    {
        return begin_turnDown(angle, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_turnDown(float angle, java.util.Map<String, String> __ctx, Callback_Camera_turnDown __cb)
    {
        return begin_turnDown(angle, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_turnDown(float angle, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_turnDown(angle, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_turnDown(float angle, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_turnDown(angle, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_turnDown(float angle, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_turnDown(angle, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_turnDown(float angle, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_turnDown(angle, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_turnDown(float angle, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_turnDown(angle, __ctx, __explicitCtx, __synchronous, 
                              new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                  {
                                      public final void __completed(Ice.AsyncResult __result)
                                      {
                                          ZoomingCameraPrxHelper.__turnDown_completed(this, __result);
                                      }
                                  });
    }

    private Ice.AsyncResult begin_turnDown(float angle, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__turnDown_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__turnDown_name, __cb);
        try
        {
            __result.prepare(__turnDown_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeFloat(angle);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_turnDown(Ice.AsyncResult __iresult)
        throws RotationOutOfRangeException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __turnDown_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(RotationOutOfRangeException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __turnDown_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Demo.CameraPrx __proxy = (Demo.CameraPrx)__result.getProxy();
        try
        {
            __proxy.end_turnDown(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __turnLeft_name = "turnLeft";

    public void turnLeft(float angle)
        throws RotationOutOfRangeException
    {
        turnLeft(angle, null, false);
    }

    public void turnLeft(float angle, java.util.Map<String, String> __ctx)
        throws RotationOutOfRangeException
    {
        turnLeft(angle, __ctx, true);
    }

    private void turnLeft(float angle, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws RotationOutOfRangeException
    {
        __checkTwowayOnly(__turnLeft_name);
        end_turnLeft(begin_turnLeft(angle, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_turnLeft(float angle)
    {
        return begin_turnLeft(angle, null, false, false, null);
    }

    public Ice.AsyncResult begin_turnLeft(float angle, java.util.Map<String, String> __ctx)
    {
        return begin_turnLeft(angle, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_turnLeft(float angle, Ice.Callback __cb)
    {
        return begin_turnLeft(angle, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_turnLeft(float angle, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_turnLeft(angle, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_turnLeft(float angle, Callback_Camera_turnLeft __cb)
    {
        return begin_turnLeft(angle, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_turnLeft(float angle, java.util.Map<String, String> __ctx, Callback_Camera_turnLeft __cb)
    {
        return begin_turnLeft(angle, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_turnLeft(float angle, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_turnLeft(angle, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_turnLeft(float angle, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_turnLeft(angle, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_turnLeft(float angle, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_turnLeft(angle, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_turnLeft(float angle, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_turnLeft(angle, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_turnLeft(float angle, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_turnLeft(angle, __ctx, __explicitCtx, __synchronous, 
                              new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                  {
                                      public final void __completed(Ice.AsyncResult __result)
                                      {
                                          ZoomingCameraPrxHelper.__turnLeft_completed(this, __result);
                                      }
                                  });
    }

    private Ice.AsyncResult begin_turnLeft(float angle, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__turnLeft_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__turnLeft_name, __cb);
        try
        {
            __result.prepare(__turnLeft_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeFloat(angle);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_turnLeft(Ice.AsyncResult __iresult)
        throws RotationOutOfRangeException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __turnLeft_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(RotationOutOfRangeException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __turnLeft_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Demo.CameraPrx __proxy = (Demo.CameraPrx)__result.getProxy();
        try
        {
            __proxy.end_turnLeft(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __turnRight_name = "turnRight";

    public void turnRight(float angle)
        throws RotationOutOfRangeException
    {
        turnRight(angle, null, false);
    }

    public void turnRight(float angle, java.util.Map<String, String> __ctx)
        throws RotationOutOfRangeException
    {
        turnRight(angle, __ctx, true);
    }

    private void turnRight(float angle, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws RotationOutOfRangeException
    {
        __checkTwowayOnly(__turnRight_name);
        end_turnRight(begin_turnRight(angle, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_turnRight(float angle)
    {
        return begin_turnRight(angle, null, false, false, null);
    }

    public Ice.AsyncResult begin_turnRight(float angle, java.util.Map<String, String> __ctx)
    {
        return begin_turnRight(angle, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_turnRight(float angle, Ice.Callback __cb)
    {
        return begin_turnRight(angle, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_turnRight(float angle, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_turnRight(angle, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_turnRight(float angle, Callback_Camera_turnRight __cb)
    {
        return begin_turnRight(angle, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_turnRight(float angle, java.util.Map<String, String> __ctx, Callback_Camera_turnRight __cb)
    {
        return begin_turnRight(angle, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_turnRight(float angle, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_turnRight(angle, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_turnRight(float angle, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_turnRight(angle, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_turnRight(float angle, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_turnRight(angle, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_turnRight(float angle, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_turnRight(angle, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_turnRight(float angle, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_turnRight(angle, __ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           ZoomingCameraPrxHelper.__turnRight_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_turnRight(float angle, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__turnRight_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__turnRight_name, __cb);
        try
        {
            __result.prepare(__turnRight_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeFloat(angle);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_turnRight(Ice.AsyncResult __iresult)
        throws RotationOutOfRangeException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __turnRight_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(RotationOutOfRangeException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __turnRight_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Demo.CameraPrx __proxy = (Demo.CameraPrx)__result.getProxy();
        try
        {
            __proxy.end_turnRight(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __turnUp_name = "turnUp";

    public void turnUp(float angle)
        throws RotationOutOfRangeException
    {
        turnUp(angle, null, false);
    }

    public void turnUp(float angle, java.util.Map<String, String> __ctx)
        throws RotationOutOfRangeException
    {
        turnUp(angle, __ctx, true);
    }

    private void turnUp(float angle, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws RotationOutOfRangeException
    {
        __checkTwowayOnly(__turnUp_name);
        end_turnUp(begin_turnUp(angle, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_turnUp(float angle)
    {
        return begin_turnUp(angle, null, false, false, null);
    }

    public Ice.AsyncResult begin_turnUp(float angle, java.util.Map<String, String> __ctx)
    {
        return begin_turnUp(angle, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_turnUp(float angle, Ice.Callback __cb)
    {
        return begin_turnUp(angle, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_turnUp(float angle, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_turnUp(angle, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_turnUp(float angle, Callback_Camera_turnUp __cb)
    {
        return begin_turnUp(angle, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_turnUp(float angle, java.util.Map<String, String> __ctx, Callback_Camera_turnUp __cb)
    {
        return begin_turnUp(angle, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_turnUp(float angle, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_turnUp(angle, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_turnUp(float angle, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_turnUp(angle, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_turnUp(float angle, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_turnUp(angle, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_turnUp(float angle, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_turnUp(angle, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_turnUp(float angle, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_turnUp(angle, __ctx, __explicitCtx, __synchronous, 
                            new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                {
                                    public final void __completed(Ice.AsyncResult __result)
                                    {
                                        ZoomingCameraPrxHelper.__turnUp_completed(this, __result);
                                    }
                                });
    }

    private Ice.AsyncResult begin_turnUp(float angle, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__turnUp_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__turnUp_name, __cb);
        try
        {
            __result.prepare(__turnUp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeFloat(angle);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_turnUp(Ice.AsyncResult __iresult)
        throws RotationOutOfRangeException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __turnUp_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(RotationOutOfRangeException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __turnUp_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Demo.CameraPrx __proxy = (Demo.CameraPrx)__result.getProxy();
        try
        {
            __proxy.end_turnUp(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __feedBattery_name = "feedBattery";

    public void feedBattery()
    {
        feedBattery(null, false);
    }

    public void feedBattery(java.util.Map<String, String> __ctx)
    {
        feedBattery(__ctx, true);
    }

    private void feedBattery(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_feedBattery(begin_feedBattery(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_feedBattery()
    {
        return begin_feedBattery(null, false, false, null);
    }

    public Ice.AsyncResult begin_feedBattery(java.util.Map<String, String> __ctx)
    {
        return begin_feedBattery(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_feedBattery(Ice.Callback __cb)
    {
        return begin_feedBattery(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_feedBattery(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_feedBattery(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_feedBattery(Callback_Device_feedBattery __cb)
    {
        return begin_feedBattery(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_feedBattery(java.util.Map<String, String> __ctx, Callback_Device_feedBattery __cb)
    {
        return begin_feedBattery(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_feedBattery(IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_feedBattery(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_feedBattery(IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_feedBattery(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_feedBattery(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_feedBattery(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_feedBattery(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_feedBattery(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_feedBattery(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_feedBattery(__ctx, 
                                 __explicitCtx, 
                                 __synchronous, 
                                 new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_feedBattery(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__feedBattery_name, __cb);
        try
        {
            __result.prepare(__feedBattery_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_feedBattery(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __feedBattery_name);
    }

    private static final String __getName_name = "getName";

    public String getName()
    {
        return getName(null, false);
    }

    public String getName(java.util.Map<String, String> __ctx)
    {
        return getName(__ctx, true);
    }

    private String getName(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getName_name);
        return end_getName(begin_getName(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getName()
    {
        return begin_getName(null, false, false, null);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx)
    {
        return begin_getName(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getName(Ice.Callback __cb)
    {
        return begin_getName(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getName(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getName(Callback_Device_getName __cb)
    {
        return begin_getName(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Callback_Device_getName __cb)
    {
        return begin_getName(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getName(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getName(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getName(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getName(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getName(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getName(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getName(__ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         ZoomingCameraPrxHelper.__getName_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getName_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getName_name, __cb);
        try
        {
            __result.prepare(__getName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_getName(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getName_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getName_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        Demo.DevicePrx __proxy = (Demo.DevicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_getName(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getState_name = "getState";

    public String getState()
    {
        return getState(null, false);
    }

    public String getState(java.util.Map<String, String> __ctx)
    {
        return getState(__ctx, true);
    }

    private String getState(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getState_name);
        return end_getState(begin_getState(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getState()
    {
        return begin_getState(null, false, false, null);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx)
    {
        return begin_getState(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getState(Ice.Callback __cb)
    {
        return begin_getState(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getState(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getState(Callback_Device_getState __cb)
    {
        return begin_getState(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Callback_Device_getState __cb)
    {
        return begin_getState(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getState(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getState(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getState(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getState(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getState(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getState(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getState(__ctx, __explicitCtx, __synchronous, 
                              new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                  {
                                      public final void __completed(Ice.AsyncResult __result)
                                      {
                                          ZoomingCameraPrxHelper.__getState_completed(this, __result);
                                      }
                                  });
    }

    private Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getState_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getState_name, __cb);
        try
        {
            __result.prepare(__getState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_getState(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getState_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getState_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        Demo.DevicePrx __proxy = (Demo.DevicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_getState(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __listActions_name = "listActions";

    public String[] listActions()
    {
        return listActions(null, false);
    }

    public String[] listActions(java.util.Map<String, String> __ctx)
    {
        return listActions(__ctx, true);
    }

    private String[] listActions(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__listActions_name);
        return end_listActions(begin_listActions(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_listActions()
    {
        return begin_listActions(null, false, false, null);
    }

    public Ice.AsyncResult begin_listActions(java.util.Map<String, String> __ctx)
    {
        return begin_listActions(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_listActions(Ice.Callback __cb)
    {
        return begin_listActions(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_listActions(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_listActions(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_listActions(Callback_Device_listActions __cb)
    {
        return begin_listActions(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_listActions(java.util.Map<String, String> __ctx, Callback_Device_listActions __cb)
    {
        return begin_listActions(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_listActions(IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_listActions(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_listActions(IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_listActions(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_listActions(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_listActions(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_listActions(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_listActions(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_listActions(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_listActions(__ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<String[]>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             ZoomingCameraPrxHelper.__listActions_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_listActions(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__listActions_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__listActions_name, __cb);
        try
        {
            __result.prepare(__listActions_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String[] end_listActions(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __listActions_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String[] __ret;
            __ret = stringSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __listActions_completed(Ice.TwowayCallbackArg1<String[]> __cb, Ice.AsyncResult __result)
    {
        Demo.DevicePrx __proxy = (Demo.DevicePrx)__result.getProxy();
        String[] __ret = null;
        try
        {
            __ret = __proxy.end_listActions(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __zoom_name = "zoom";

    public void zoom(int lvl)
        throws ZoomOutOfRangeException
    {
        zoom(lvl, null, false);
    }

    public void zoom(int lvl, java.util.Map<String, String> __ctx)
        throws ZoomOutOfRangeException
    {
        zoom(lvl, __ctx, true);
    }

    private void zoom(int lvl, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ZoomOutOfRangeException
    {
        __checkTwowayOnly(__zoom_name);
        end_zoom(begin_zoom(lvl, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_zoom(int lvl)
    {
        return begin_zoom(lvl, null, false, false, null);
    }

    public Ice.AsyncResult begin_zoom(int lvl, java.util.Map<String, String> __ctx)
    {
        return begin_zoom(lvl, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_zoom(int lvl, Ice.Callback __cb)
    {
        return begin_zoom(lvl, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_zoom(int lvl, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_zoom(lvl, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_zoom(int lvl, Callback_ZoomingCamera_zoom __cb)
    {
        return begin_zoom(lvl, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_zoom(int lvl, java.util.Map<String, String> __ctx, Callback_ZoomingCamera_zoom __cb)
    {
        return begin_zoom(lvl, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_zoom(int lvl, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_zoom(lvl, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_zoom(int lvl, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_zoom(lvl, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_zoom(int lvl, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_zoom(lvl, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_zoom(int lvl, 
                                      java.util.Map<String, String> __ctx, 
                                      IceInternal.Functional_VoidCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_zoom(lvl, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_zoom(int lvl, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.Functional_VoidCallback __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_zoom(lvl, __ctx, __explicitCtx, __synchronous, 
                          new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                              {
                                  public final void __completed(Ice.AsyncResult __result)
                                  {
                                      ZoomingCameraPrxHelper.__zoom_completed(this, __result);
                                  }
                              });
    }

    private Ice.AsyncResult begin_zoom(int lvl, 
                                       java.util.Map<String, String> __ctx, 
                                       boolean __explicitCtx, 
                                       boolean __synchronous, 
                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__zoom_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__zoom_name, __cb);
        try
        {
            __result.prepare(__zoom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(lvl);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_zoom(Ice.AsyncResult __iresult)
        throws ZoomOutOfRangeException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __zoom_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(ZoomOutOfRangeException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __zoom_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Demo.ZoomingCameraPrx __proxy = (Demo.ZoomingCameraPrx)__result.getProxy();
        try
        {
            __proxy.end_zoom(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ZoomingCameraPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), ZoomingCameraPrx.class, ZoomingCameraPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ZoomingCameraPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), ZoomingCameraPrx.class, ZoomingCameraPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ZoomingCameraPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), ZoomingCameraPrx.class, ZoomingCameraPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ZoomingCameraPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), ZoomingCameraPrx.class, ZoomingCameraPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static ZoomingCameraPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, ZoomingCameraPrx.class, ZoomingCameraPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static ZoomingCameraPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, ZoomingCameraPrx.class, ZoomingCameraPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Demo::Camera",
        "::Demo::Device",
        "::Demo::ZoomingCamera",
        "::Ice::Object"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[2];
    }

    public static void __write(IceInternal.BasicStream __os, ZoomingCameraPrx v)
    {
        __os.writeProxy(v);
    }

    public static ZoomingCameraPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ZoomingCameraPrxHelper result = new ZoomingCameraPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
