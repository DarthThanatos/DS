// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `laboratory.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

/**
 * Provides type-specific helper functions.
 **/
public final class BodyTemperatureSensorPrxHelper extends Ice.ObjectPrxHelperBase implements BodyTemperatureSensorPrx
{
    private static final String __measureBodyTemperature_name = "measureBodyTemperature";

    public BodyTemperatureStatePrx measureBodyTemperature(temperature temperatureObj)
    {
        return measureBodyTemperature(temperatureObj, null, false);
    }

    public BodyTemperatureStatePrx measureBodyTemperature(temperature temperatureObj, java.util.Map<String, String> __ctx)
    {
        return measureBodyTemperature(temperatureObj, __ctx, true);
    }

    private BodyTemperatureStatePrx measureBodyTemperature(temperature temperatureObj, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__measureBodyTemperature_name);
        return end_measureBodyTemperature(begin_measureBodyTemperature(temperatureObj, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_measureBodyTemperature(temperature temperatureObj)
    {
        return begin_measureBodyTemperature(temperatureObj, null, false, false, null);
    }

    public Ice.AsyncResult begin_measureBodyTemperature(temperature temperatureObj, java.util.Map<String, String> __ctx)
    {
        return begin_measureBodyTemperature(temperatureObj, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_measureBodyTemperature(temperature temperatureObj, Ice.Callback __cb)
    {
        return begin_measureBodyTemperature(temperatureObj, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_measureBodyTemperature(temperature temperatureObj, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_measureBodyTemperature(temperatureObj, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_measureBodyTemperature(temperature temperatureObj, Callback_BodyTemperatureSensor_measureBodyTemperature __cb)
    {
        return begin_measureBodyTemperature(temperatureObj, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_measureBodyTemperature(temperature temperatureObj, java.util.Map<String, String> __ctx, Callback_BodyTemperatureSensor_measureBodyTemperature __cb)
    {
        return begin_measureBodyTemperature(temperatureObj, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_measureBodyTemperature(temperature temperatureObj, 
                                                        IceInternal.Functional_GenericCallback1<BodyTemperatureStatePrx> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_measureBodyTemperature(temperatureObj, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_measureBodyTemperature(temperature temperatureObj, 
                                                        IceInternal.Functional_GenericCallback1<BodyTemperatureStatePrx> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_measureBodyTemperature(temperatureObj, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_measureBodyTemperature(temperature temperatureObj, 
                                                        java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_GenericCallback1<BodyTemperatureStatePrx> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_measureBodyTemperature(temperatureObj, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_measureBodyTemperature(temperature temperatureObj, 
                                                        java.util.Map<String, String> __ctx, 
                                                        IceInternal.Functional_GenericCallback1<BodyTemperatureStatePrx> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_measureBodyTemperature(temperatureObj, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_measureBodyTemperature(temperature temperatureObj, 
                                                         java.util.Map<String, String> __ctx, 
                                                         boolean __explicitCtx, 
                                                         boolean __synchronous, 
                                                         IceInternal.Functional_GenericCallback1<BodyTemperatureStatePrx> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_measureBodyTemperature(temperatureObj, __ctx, __explicitCtx, __synchronous, 
                                            new IceInternal.Functional_TwowayCallbackArg1<Demo.BodyTemperatureStatePrx>(__responseCb, __exceptionCb, __sentCb)
                                                {
                                                    public final void __completed(Ice.AsyncResult __result)
                                                    {
                                                        BodyTemperatureSensorPrxHelper.__measureBodyTemperature_completed(this, __result);
                                                    }
                                                });
    }

    private Ice.AsyncResult begin_measureBodyTemperature(temperature temperatureObj, 
                                                         java.util.Map<String, String> __ctx, 
                                                         boolean __explicitCtx, 
                                                         boolean __synchronous, 
                                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__measureBodyTemperature_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__measureBodyTemperature_name, __cb);
        try
        {
            __result.prepare(__measureBodyTemperature_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            temperature.__write(__os, temperatureObj);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public BodyTemperatureStatePrx end_measureBodyTemperature(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __measureBodyTemperature_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            BodyTemperatureStatePrx __ret;
            __ret = BodyTemperatureStatePrxHelper.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __measureBodyTemperature_completed(Ice.TwowayCallbackArg1<BodyTemperatureStatePrx> __cb, Ice.AsyncResult __result)
    {
        Demo.BodyTemperatureSensorPrx __proxy = (Demo.BodyTemperatureSensorPrx)__result.getProxy();
        BodyTemperatureStatePrx __ret = null;
        try
        {
            __ret = __proxy.end_measureBodyTemperature(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __feedBattery_name = "feedBattery";

    public void feedBattery()
    {
        feedBattery(null, false);
    }

    public void feedBattery(java.util.Map<String, String> __ctx)
    {
        feedBattery(__ctx, true);
    }

    private void feedBattery(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_feedBattery(begin_feedBattery(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_feedBattery()
    {
        return begin_feedBattery(null, false, false, null);
    }

    public Ice.AsyncResult begin_feedBattery(java.util.Map<String, String> __ctx)
    {
        return begin_feedBattery(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_feedBattery(Ice.Callback __cb)
    {
        return begin_feedBattery(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_feedBattery(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_feedBattery(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_feedBattery(Callback_Device_feedBattery __cb)
    {
        return begin_feedBattery(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_feedBattery(java.util.Map<String, String> __ctx, Callback_Device_feedBattery __cb)
    {
        return begin_feedBattery(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_feedBattery(IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_feedBattery(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_feedBattery(IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_feedBattery(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_feedBattery(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_feedBattery(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_feedBattery(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_feedBattery(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_feedBattery(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_VoidCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_feedBattery(__ctx, 
                                 __explicitCtx, 
                                 __synchronous, 
                                 new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_feedBattery(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__feedBattery_name, __cb);
        try
        {
            __result.prepare(__feedBattery_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_feedBattery(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __feedBattery_name);
    }

    private static final String __getName_name = "getName";

    public String getName()
    {
        return getName(null, false);
    }

    public String getName(java.util.Map<String, String> __ctx)
    {
        return getName(__ctx, true);
    }

    private String getName(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getName_name);
        return end_getName(begin_getName(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getName()
    {
        return begin_getName(null, false, false, null);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx)
    {
        return begin_getName(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getName(Ice.Callback __cb)
    {
        return begin_getName(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getName(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getName(Callback_Device_getName __cb)
    {
        return begin_getName(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, Callback_Device_getName __cb)
    {
        return begin_getName(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getName(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getName(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getName(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getName(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getName(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getName(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getName(__ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         BodyTemperatureSensorPrxHelper.__getName_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_getName(java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getName_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getName_name, __cb);
        try
        {
            __result.prepare(__getName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_getName(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getName_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getName_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        Demo.DevicePrx __proxy = (Demo.DevicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_getName(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getState_name = "getState";

    public String getState()
    {
        return getState(null, false);
    }

    public String getState(java.util.Map<String, String> __ctx)
    {
        return getState(__ctx, true);
    }

    private String getState(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getState_name);
        return end_getState(begin_getState(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getState()
    {
        return begin_getState(null, false, false, null);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx)
    {
        return begin_getState(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getState(Ice.Callback __cb)
    {
        return begin_getState(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getState(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getState(Callback_Device_getState __cb)
    {
        return begin_getState(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Callback_Device_getState __cb)
    {
        return begin_getState(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getState(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getState(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getState(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getState(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getState(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getState(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getState(__ctx, __explicitCtx, __synchronous, 
                              new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                  {
                                      public final void __completed(Ice.AsyncResult __result)
                                      {
                                          BodyTemperatureSensorPrxHelper.__getState_completed(this, __result);
                                      }
                                  });
    }

    private Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getState_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getState_name, __cb);
        try
        {
            __result.prepare(__getState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_getState(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getState_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getState_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        Demo.DevicePrx __proxy = (Demo.DevicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_getState(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __listActions_name = "listActions";

    public String[] listActions()
    {
        return listActions(null, false);
    }

    public String[] listActions(java.util.Map<String, String> __ctx)
    {
        return listActions(__ctx, true);
    }

    private String[] listActions(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__listActions_name);
        return end_listActions(begin_listActions(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_listActions()
    {
        return begin_listActions(null, false, false, null);
    }

    public Ice.AsyncResult begin_listActions(java.util.Map<String, String> __ctx)
    {
        return begin_listActions(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_listActions(Ice.Callback __cb)
    {
        return begin_listActions(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_listActions(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_listActions(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_listActions(Callback_Device_listActions __cb)
    {
        return begin_listActions(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_listActions(java.util.Map<String, String> __ctx, Callback_Device_listActions __cb)
    {
        return begin_listActions(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_listActions(IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_listActions(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_listActions(IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_listActions(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_listActions(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_listActions(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_listActions(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_listActions(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_listActions(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_listActions(__ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<String[]>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             BodyTemperatureSensorPrxHelper.__listActions_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_listActions(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__listActions_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__listActions_name, __cb);
        try
        {
            __result.prepare(__listActions_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String[] end_listActions(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __listActions_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String[] __ret;
            __ret = stringSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __listActions_completed(Ice.TwowayCallbackArg1<String[]> __cb, Ice.AsyncResult __result)
    {
        Demo.DevicePrx __proxy = (Demo.DevicePrx)__result.getProxy();
        String[] __ret = null;
        try
        {
            __ret = __proxy.end_listActions(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __measureMotion_name = "measureMotion";

    public SensorStatePrx measureMotion(speed speedObj)
    {
        return measureMotion(speedObj, null, false);
    }

    public SensorStatePrx measureMotion(speed speedObj, java.util.Map<String, String> __ctx)
    {
        return measureMotion(speedObj, __ctx, true);
    }

    private SensorStatePrx measureMotion(speed speedObj, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__measureMotion_name);
        return end_measureMotion(begin_measureMotion(speedObj, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_measureMotion(speed speedObj)
    {
        return begin_measureMotion(speedObj, null, false, false, null);
    }

    public Ice.AsyncResult begin_measureMotion(speed speedObj, java.util.Map<String, String> __ctx)
    {
        return begin_measureMotion(speedObj, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_measureMotion(speed speedObj, Ice.Callback __cb)
    {
        return begin_measureMotion(speedObj, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_measureMotion(speed speedObj, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_measureMotion(speedObj, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_measureMotion(speed speedObj, Callback_Sensor_measureMotion __cb)
    {
        return begin_measureMotion(speedObj, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_measureMotion(speed speedObj, java.util.Map<String, String> __ctx, Callback_Sensor_measureMotion __cb)
    {
        return begin_measureMotion(speedObj, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_measureMotion(speed speedObj, 
                                               IceInternal.Functional_GenericCallback1<SensorStatePrx> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_measureMotion(speedObj, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_measureMotion(speed speedObj, 
                                               IceInternal.Functional_GenericCallback1<SensorStatePrx> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_measureMotion(speedObj, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_measureMotion(speed speedObj, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<SensorStatePrx> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_measureMotion(speedObj, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_measureMotion(speed speedObj, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<SensorStatePrx> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_measureMotion(speedObj, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_measureMotion(speed speedObj, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<SensorStatePrx> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_measureMotion(speedObj, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1<Demo.SensorStatePrx>(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               BodyTemperatureSensorPrxHelper.__measureMotion_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_measureMotion(speed speedObj, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__measureMotion_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__measureMotion_name, __cb);
        try
        {
            __result.prepare(__measureMotion_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            speed.__write(__os, speedObj);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public SensorStatePrx end_measureMotion(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __measureMotion_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            SensorStatePrx __ret;
            __ret = SensorStatePrxHelper.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __measureMotion_completed(Ice.TwowayCallbackArg1<SensorStatePrx> __cb, Ice.AsyncResult __result)
    {
        Demo.SensorPrx __proxy = (Demo.SensorPrx)__result.getProxy();
        SensorStatePrx __ret = null;
        try
        {
            __ret = __proxy.end_measureMotion(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static BodyTemperatureSensorPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), BodyTemperatureSensorPrx.class, BodyTemperatureSensorPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static BodyTemperatureSensorPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), BodyTemperatureSensorPrx.class, BodyTemperatureSensorPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static BodyTemperatureSensorPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), BodyTemperatureSensorPrx.class, BodyTemperatureSensorPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static BodyTemperatureSensorPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), BodyTemperatureSensorPrx.class, BodyTemperatureSensorPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static BodyTemperatureSensorPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, BodyTemperatureSensorPrx.class, BodyTemperatureSensorPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static BodyTemperatureSensorPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, BodyTemperatureSensorPrx.class, BodyTemperatureSensorPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Demo::BodyTemperatureSensor",
        "::Demo::Device",
        "::Demo::Sensor",
        "::Ice::Object"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[0];
    }

    public static void __write(IceInternal.BasicStream __os, BodyTemperatureSensorPrx v)
    {
        __os.writeProxy(v);
    }

    public static BodyTemperatureSensorPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            BodyTemperatureSensorPrxHelper result = new BodyTemperatureSensorPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
