// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `laboratory.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

/**
 * Provides type-specific helper functions.
 **/
public final class LaboratoryRoomPrxHelper extends Ice.ObjectPrxHelperBase implements LaboratoryRoomPrx
{
    private static final String __getDeviceOperationsList_name = "getDeviceOperationsList";

    public String[] getDeviceOperationsList(String deviceId)
        throws NotKnownDeviceException
    {
        return getDeviceOperationsList(deviceId, null, false);
    }

    public String[] getDeviceOperationsList(String deviceId, java.util.Map<String, String> __ctx)
        throws NotKnownDeviceException
    {
        return getDeviceOperationsList(deviceId, __ctx, true);
    }

    private String[] getDeviceOperationsList(String deviceId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws NotKnownDeviceException
    {
        __checkTwowayOnly(__getDeviceOperationsList_name);
        return end_getDeviceOperationsList(begin_getDeviceOperationsList(deviceId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getDeviceOperationsList(String deviceId)
    {
        return begin_getDeviceOperationsList(deviceId, null, false, false, null);
    }

    public Ice.AsyncResult begin_getDeviceOperationsList(String deviceId, java.util.Map<String, String> __ctx)
    {
        return begin_getDeviceOperationsList(deviceId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getDeviceOperationsList(String deviceId, Ice.Callback __cb)
    {
        return begin_getDeviceOperationsList(deviceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDeviceOperationsList(String deviceId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDeviceOperationsList(deviceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDeviceOperationsList(String deviceId, Callback_LaboratoryRoom_getDeviceOperationsList __cb)
    {
        return begin_getDeviceOperationsList(deviceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDeviceOperationsList(String deviceId, java.util.Map<String, String> __ctx, Callback_LaboratoryRoom_getDeviceOperationsList __cb)
    {
        return begin_getDeviceOperationsList(deviceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDeviceOperationsList(String deviceId, 
                                                         IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDeviceOperationsList(deviceId, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDeviceOperationsList(String deviceId, 
                                                         IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDeviceOperationsList(deviceId, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getDeviceOperationsList(String deviceId, 
                                                         java.util.Map<String, String> __ctx, 
                                                         IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDeviceOperationsList(deviceId, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDeviceOperationsList(String deviceId, 
                                                         java.util.Map<String, String> __ctx, 
                                                         IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDeviceOperationsList(deviceId, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getDeviceOperationsList(String deviceId, 
                                                          java.util.Map<String, String> __ctx, 
                                                          boolean __explicitCtx, 
                                                          boolean __synchronous, 
                                                          IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDeviceOperationsList(deviceId, __ctx, __explicitCtx, __synchronous, 
                                             new IceInternal.Functional_TwowayCallbackArg1UE<String[]>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                                 {
                                                     public final void __completed(Ice.AsyncResult __result)
                                                     {
                                                         LaboratoryRoomPrxHelper.__getDeviceOperationsList_completed(this, __result);
                                                     }
                                                 });
    }

    private Ice.AsyncResult begin_getDeviceOperationsList(String deviceId, 
                                                          java.util.Map<String, String> __ctx, 
                                                          boolean __explicitCtx, 
                                                          boolean __synchronous, 
                                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDeviceOperationsList_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getDeviceOperationsList_name, __cb);
        try
        {
            __result.prepare(__getDeviceOperationsList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(deviceId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String[] end_getDeviceOperationsList(Ice.AsyncResult __iresult)
        throws NotKnownDeviceException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getDeviceOperationsList_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(NotKnownDeviceException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String[] __ret;
            __ret = stringSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getDeviceOperationsList_completed(Ice.TwowayCallbackArg1UE<String[]> __cb, Ice.AsyncResult __result)
    {
        Demo.LaboratoryRoomPrx __proxy = (Demo.LaboratoryRoomPrx)__result.getProxy();
        String[] __ret = null;
        try
        {
            __ret = __proxy.end_getDeviceOperationsList(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getDevicesNamesList_name = "getDevicesNamesList";

    public String[] getDevicesNamesList()
    {
        return getDevicesNamesList(null, false);
    }

    public String[] getDevicesNamesList(java.util.Map<String, String> __ctx)
    {
        return getDevicesNamesList(__ctx, true);
    }

    private String[] getDevicesNamesList(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getDevicesNamesList_name);
        return end_getDevicesNamesList(begin_getDevicesNamesList(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getDevicesNamesList()
    {
        return begin_getDevicesNamesList(null, false, false, null);
    }

    public Ice.AsyncResult begin_getDevicesNamesList(java.util.Map<String, String> __ctx)
    {
        return begin_getDevicesNamesList(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getDevicesNamesList(Ice.Callback __cb)
    {
        return begin_getDevicesNamesList(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDevicesNamesList(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDevicesNamesList(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDevicesNamesList(Callback_LaboratoryRoom_getDevicesNamesList __cb)
    {
        return begin_getDevicesNamesList(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getDevicesNamesList(java.util.Map<String, String> __ctx, Callback_LaboratoryRoom_getDevicesNamesList __cb)
    {
        return begin_getDevicesNamesList(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getDevicesNamesList(IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDevicesNamesList(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDevicesNamesList(IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDevicesNamesList(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getDevicesNamesList(java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getDevicesNamesList(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getDevicesNamesList(java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDevicesNamesList(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getDevicesNamesList(java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getDevicesNamesList(__ctx, __explicitCtx, __synchronous, 
                                         new IceInternal.Functional_TwowayCallbackArg1<String[]>(__responseCb, __exceptionCb, __sentCb)
                                             {
                                                 public final void __completed(Ice.AsyncResult __result)
                                                 {
                                                     LaboratoryRoomPrxHelper.__getDevicesNamesList_completed(this, __result);
                                                 }
                                             });
    }

    private Ice.AsyncResult begin_getDevicesNamesList(java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDevicesNamesList_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getDevicesNamesList_name, __cb);
        try
        {
            __result.prepare(__getDevicesNamesList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String[] end_getDevicesNamesList(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getDevicesNamesList_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String[] __ret;
            __ret = stringSeqHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getDevicesNamesList_completed(Ice.TwowayCallbackArg1<String[]> __cb, Ice.AsyncResult __result)
    {
        Demo.LaboratoryRoomPrx __proxy = (Demo.LaboratoryRoomPrx)__result.getProxy();
        String[] __ret = null;
        try
        {
            __ret = __proxy.end_getDevicesNamesList(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __releaseDevice_name = "releaseDevice";

    public void releaseDevice(String deviceId, String userId)
        throws DeviceNotControlledException,
               NotKnownDeviceException
    {
        releaseDevice(deviceId, userId, null, false);
    }

    public void releaseDevice(String deviceId, String userId, java.util.Map<String, String> __ctx)
        throws DeviceNotControlledException,
               NotKnownDeviceException
    {
        releaseDevice(deviceId, userId, __ctx, true);
    }

    private void releaseDevice(String deviceId, String userId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws DeviceNotControlledException,
               NotKnownDeviceException
    {
        __checkTwowayOnly(__releaseDevice_name);
        end_releaseDevice(begin_releaseDevice(deviceId, userId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_releaseDevice(String deviceId, String userId)
    {
        return begin_releaseDevice(deviceId, userId, null, false, false, null);
    }

    public Ice.AsyncResult begin_releaseDevice(String deviceId, String userId, java.util.Map<String, String> __ctx)
    {
        return begin_releaseDevice(deviceId, userId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_releaseDevice(String deviceId, String userId, Ice.Callback __cb)
    {
        return begin_releaseDevice(deviceId, userId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_releaseDevice(String deviceId, String userId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_releaseDevice(deviceId, userId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_releaseDevice(String deviceId, String userId, Callback_LaboratoryRoom_releaseDevice __cb)
    {
        return begin_releaseDevice(deviceId, userId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_releaseDevice(String deviceId, String userId, java.util.Map<String, String> __ctx, Callback_LaboratoryRoom_releaseDevice __cb)
    {
        return begin_releaseDevice(deviceId, userId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_releaseDevice(String deviceId, 
                                               String userId, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_releaseDevice(deviceId, userId, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_releaseDevice(String deviceId, 
                                               String userId, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_releaseDevice(deviceId, userId, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_releaseDevice(String deviceId, 
                                               String userId, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_releaseDevice(deviceId, userId, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_releaseDevice(String deviceId, 
                                               String userId, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_VoidCallback __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_releaseDevice(deviceId, userId, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_releaseDevice(String deviceId, 
                                                String userId, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_VoidCallback __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_releaseDevice(deviceId, userId, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               LaboratoryRoomPrxHelper.__releaseDevice_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_releaseDevice(String deviceId, 
                                                String userId, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__releaseDevice_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__releaseDevice_name, __cb);
        try
        {
            __result.prepare(__releaseDevice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(deviceId);
            __os.writeString(userId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_releaseDevice(Ice.AsyncResult __iresult)
        throws DeviceNotControlledException,
               NotKnownDeviceException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __releaseDevice_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(DeviceNotControlledException __ex)
                {
                    throw __ex;
                }
                catch(NotKnownDeviceException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __releaseDevice_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        Demo.LaboratoryRoomPrx __proxy = (Demo.LaboratoryRoomPrx)__result.getProxy();
        try
        {
            __proxy.end_releaseDevice(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __takeControlOverDevice_name = "takeControlOverDevice";

    public DevicePrx takeControlOverDevice(String deviceId, String userId)
        throws AlreadyControlledException,
               NotKnownDeviceException
    {
        return takeControlOverDevice(deviceId, userId, null, false);
    }

    public DevicePrx takeControlOverDevice(String deviceId, String userId, java.util.Map<String, String> __ctx)
        throws AlreadyControlledException,
               NotKnownDeviceException
    {
        return takeControlOverDevice(deviceId, userId, __ctx, true);
    }

    private DevicePrx takeControlOverDevice(String deviceId, String userId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws AlreadyControlledException,
               NotKnownDeviceException
    {
        __checkTwowayOnly(__takeControlOverDevice_name);
        return end_takeControlOverDevice(begin_takeControlOverDevice(deviceId, userId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String deviceId, String userId)
    {
        return begin_takeControlOverDevice(deviceId, userId, null, false, false, null);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String deviceId, String userId, java.util.Map<String, String> __ctx)
    {
        return begin_takeControlOverDevice(deviceId, userId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String deviceId, String userId, Ice.Callback __cb)
    {
        return begin_takeControlOverDevice(deviceId, userId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String deviceId, String userId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_takeControlOverDevice(deviceId, userId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String deviceId, String userId, Callback_LaboratoryRoom_takeControlOverDevice __cb)
    {
        return begin_takeControlOverDevice(deviceId, userId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String deviceId, String userId, java.util.Map<String, String> __ctx, Callback_LaboratoryRoom_takeControlOverDevice __cb)
    {
        return begin_takeControlOverDevice(deviceId, userId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String deviceId, 
                                                       String userId, 
                                                       IceInternal.Functional_GenericCallback1<DevicePrx> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_takeControlOverDevice(deviceId, userId, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String deviceId, 
                                                       String userId, 
                                                       IceInternal.Functional_GenericCallback1<DevicePrx> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_takeControlOverDevice(deviceId, userId, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String deviceId, 
                                                       String userId, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_GenericCallback1<DevicePrx> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_takeControlOverDevice(deviceId, userId, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_takeControlOverDevice(String deviceId, 
                                                       String userId, 
                                                       java.util.Map<String, String> __ctx, 
                                                       IceInternal.Functional_GenericCallback1<DevicePrx> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_takeControlOverDevice(deviceId, userId, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_takeControlOverDevice(String deviceId, 
                                                        String userId, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.Functional_GenericCallback1<DevicePrx> __responseCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_takeControlOverDevice(deviceId, userId, __ctx, __explicitCtx, __synchronous, 
                                           new IceInternal.Functional_TwowayCallbackArg1UE<Demo.DevicePrx>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                               {
                                                   public final void __completed(Ice.AsyncResult __result)
                                                   {
                                                       LaboratoryRoomPrxHelper.__takeControlOverDevice_completed(this, __result);
                                                   }
                                               });
    }

    private Ice.AsyncResult begin_takeControlOverDevice(String deviceId, 
                                                        String userId, 
                                                        java.util.Map<String, String> __ctx, 
                                                        boolean __explicitCtx, 
                                                        boolean __synchronous, 
                                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__takeControlOverDevice_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__takeControlOverDevice_name, __cb);
        try
        {
            __result.prepare(__takeControlOverDevice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(deviceId);
            __os.writeString(userId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public DevicePrx end_takeControlOverDevice(Ice.AsyncResult __iresult)
        throws AlreadyControlledException,
               NotKnownDeviceException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __takeControlOverDevice_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(AlreadyControlledException __ex)
                {
                    throw __ex;
                }
                catch(NotKnownDeviceException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            DevicePrx __ret;
            __ret = DevicePrxHelper.__read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __takeControlOverDevice_completed(Ice.TwowayCallbackArg1UE<DevicePrx> __cb, Ice.AsyncResult __result)
    {
        Demo.LaboratoryRoomPrx __proxy = (Demo.LaboratoryRoomPrx)__result.getProxy();
        DevicePrx __ret = null;
        try
        {
            __ret = __proxy.end_takeControlOverDevice(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LaboratoryRoomPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), LaboratoryRoomPrx.class, LaboratoryRoomPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LaboratoryRoomPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), LaboratoryRoomPrx.class, LaboratoryRoomPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LaboratoryRoomPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), LaboratoryRoomPrx.class, LaboratoryRoomPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static LaboratoryRoomPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), LaboratoryRoomPrx.class, LaboratoryRoomPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static LaboratoryRoomPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, LaboratoryRoomPrx.class, LaboratoryRoomPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static LaboratoryRoomPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, LaboratoryRoomPrx.class, LaboratoryRoomPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Demo::LaboratoryRoom",
        "::Ice::Object"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[0];
    }

    public static void __write(IceInternal.BasicStream __os, LaboratoryRoomPrx v)
    {
        __os.writeProxy(v);
    }

    public static LaboratoryRoomPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            LaboratoryRoomPrxHelper result = new LaboratoryRoomPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
